apply plugin: 'com.android.application'

android {
	compileSdkVersion 31
	signingConfigs {
       release {
         keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
         keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
		 if (System.getenv("ANDROID_KEYSTORE_PATH") != null) {
			storeFile file(System.getenv("ANDROID_KEYSTORE_PATH"))
		 }
         storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
       }
   }
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			aidl.srcDirs = ['src/main/java']
			renderscript.srcDirs = ['src/main/java']
			res.srcDirs = ['res']
			assets.srcDirs = ['../assets']
			jniLibs.srcDirs = ['libs']
		}
	}
	packagingOptions {
		// Preventing from license violations (more or less):
		pickFirst 'META-INF/LICENSE.txt'
		pickFirst 'META-INF/LICENSE'
		pickFirst 'META-INF/license.txt'
		pickFirst 'META-INF/LGPL2.1'
		pickFirst 'META-INF/NOTICE.txt'
		pickFirst 'META-INF/NOTICE'
		pickFirst 'META-INF/notice.txt'
		// Excluding unnecessary meta-data:
		exclude 'META-INF/robovm/ios/robovm.xml'
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/dependencies.txt'
	}
	
	def versionPropsFile = file('version.properties')

	def code = 5

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
	}
	defaultConfig {
		applicationId 'steelUnicorn.laplacity'
		minSdkVersion 19
		targetSdkVersion 31
		versionCode code
		versionName "1.0"
		multiDexEnabled true
	}
	compileOptions {
		sourceCompatibility "1.8"
		targetCompatibility "1.8"
		coreLibraryDesugaringEnabled true
	}
	
	buildTypes {
		release {
			signingConfig signingConfigs.release
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

}

repositories {
	// needed for AAPT2, may be needed for other tools
	google()

	maven {url 'https://android-sdk.is.com/'}

	maven{ url "https://imobile-maio.github.io/maven" }
	maven {url 'https://artifact.bytedance.com/repository/pangle'}
	maven { url "https://aa-sdk.s3-eu-west-1.amazonaws.com/android_repo" }
	maven { url "https://sdk.tapjoy.com/"}
	maven { url 'https://artifactory.yahooinc.com/artifactory/maven/'}
}

configurations { natives }

dependencies {

    implementation 'com.devtodev:android:1.14.10'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'androidx.preference:preference:1.1.1' //or higher, required for SDK version 1.14.8 and higher


	implementation 'com.ironsource.sdk:mediationsdk:7.2.4' 
	
	implementation fileTree(dir: 'libs', include: ['*.jar']) 
    implementation 'com.google.android.gms:play-services-appset:16.0.0' 
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0' 
    implementation 'com.google.android.gms:play-services-basement:17.1.1' 

	def acraVersion = '5.9.6'
	implementation "ch.acra:acra-mail:$acraVersion"
	implementation "ch.acra:acra-toast:$acraVersion"

	coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
	implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
	implementation files('../libs/libgdx-oboe.aar')
	implementation project(':core')
	
	implementation 'androidx.work:work-runtime:2.7.1'

	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

	// This follows advice from https://blog.gradle.org/log4j-vulnerability
	constraints {
		implementation("org.apache.logging.log4j:log4j-core") {
			version {
				strictly("[2.17, 3[")
				prefer("2.17.0")
			}
			because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
		}
	}
	
	implementation 'com.google.android.gms:play-services-ads:20.0.0'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10'

	// Add AdColony Network
	implementation 'com.ironsource.adapters:adcolonyadapter:4.3.12'
	implementation 'com.adcolony:sdk:4.7.1'
// Add AdMob and Ad Manager Network
	implementation 'com.google.android.gms:play-services-ads:21.0.0'
	implementation 'com.ironsource.adapters:admobadapter:4.3.30'
// Add Applovin Network
	implementation 'com.ironsource.adapters:applovinadapter:4.3.33'
	implementation 'com.applovin:applovin-sdk:11.4.4'
	implementation ('com.amazon.android:aps-sdk:+')
	implementation ('com.ironsource.adapters:apsadapter:4.3.4')
// Add Chartboost Network
	implementation 'com.ironsource.adapters:chartboostadapter:4.3.9'
	implementation 'com.chartboost:chartboost-sdk:9.0.0'
// Add Facebook Network
	implementation 'com.ironsource.adapters:facebookadapter:4.3.37'
	implementation 'com.facebook.android:audience-network-sdk:6.11.0'
// Add Fyber Network (Adapter only)
	implementation 'com.ironsource.adapters:fyberadapter:4.3.22'
	implementation "com.fyber:marketplace-sdk:8.2.0"
// Add HyprMX Network
	implementation 'com.ironsource.adapters:hyprmxadapter:4.3.1'
	implementation 'com.hyprmx.android:HyprMX-SDK:6.0.3'
	implementation 'com.ironsource.adapters:inmobiadapter:4.3.15'
	implementation 'com.inmobi.monetization:inmobi-ads:10.0.8'
	implementation 'com.google.android.gms:play-services-location:17.1.0'//optional dependency for better targeting
	implementation 'com.ironsource.adapters:liftoffadapter:4.3.4'
	implementation 'io.liftoff:liftoffads:1.9.1'
	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
	implementation 'androidx.core:core-ktx:1.3.2'
	implementation 'androidx.media2:media2-session:1.1.2'
	implementation 'androidx.media2:media2-widget:1.1.2'
	implementation 'androidx.media2:media2-player:1.1.2'
	implementation 'androidx.multidex:multidex:2.0.1'
	implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.31'
// Add Maio Network
	//implementation 'com.ironsource.adapters:maioadapter:4.1.10'
	//implementation 'com.maio:android-sdk:1.1.15'
// Add myTarget Network
	implementation 'com.ironsource.adapters:mytargetadapter:4.1.14'
	implementation 'com.my.target:mytarget-sdk:5.15.3'
	implementation 'com.google.android.exoplayer:exoplayer:2.17.1'
//	implementation 'com.my.tracker:mytracker-sdk:3.0.0'
// Add Pangle Network
	implementation 'com.ironsource.adapters:pangleadapter:4.3.14'
	implementation 'com.pangle.global:ads-sdk:4.5.0.4'
// Add SuperAwesome Network
	implementation 'com.ironsource.adapters:superawesomeadapter:4.1.2'
	implementation 'tv.superawesome.sdk.publisher:superawesome:8.2.1'
// Add Tapjoy Network
	implementation 'com.ironsource.adapters:tapjoyadapter:4.1.21'
	implementation 'com.tapjoy:tapjoy-android-sdk:12.10.0'
// Add Vungle Network
	implementation 'com.ironsource.adapters:vungleadapter:4.3.18'
	implementation 'com.vungle:publisher-sdk-android:6.12.0'
// Add Yahoo Network
	implementation 'com.ironsource.adapters:yahooadapter:4.3.1'
	implementation 'com.yahoo.mobile.ads:android-yahoo-mobile-sdk:1.1.1'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.30'
	implementation 'com.google.android.gms:play-services-ads-identifier:17.1.0'
	implementation 'androidx.browser:browser:1.3.0'


	implementation platform('com.google.firebase:firebase-bom:30.1.0')
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	doFirst {
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86_64/").mkdirs()
		file("libs/x86/").mkdirs()

		configurations.getByName("natives").copy().files.each { jar ->
    	    def outputDir = null
    	    if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
    	    if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
    	    if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
    	    if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
    	    if(outputDir != null) {
    	        copy {
    	            from zipTree(jar)
    	            into outputDir
    	            include "*.so"
    	        }
    	    }
    	}
	}
}

tasks.whenTaskAdded { packageTask ->
  if (packageTask.name.contains("package")) {
    packageTask.dependsOn 'copyAndroidNatives'
  }
}

task run(type: Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr ->
			properties.load(instr)
		}
		def sdkDir = properties.getProperty('sdk.dir')
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_SDK_ROOT"
		}
	} else {
		path = "$System.env.ANDROID_SDK_ROOT"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", 'shell', 'am', 'start', '-n', 'steelUnicorn.laplacity/steelUnicorn.laplacity.android.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
